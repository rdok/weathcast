name: Deploy
env:
  ORG: rdok
  NAME: weathcast
  HEROKU_AUTH_TOKEN: ${{ secrets.HEROKU_API_KEY }}
on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        required: false
        description: "Allowed values: prod, test"
        default: prod
jobs:
  check:
    uses: rdok/weathcast/.github/workflows/check.yml@main
  deploy:
    environment:
      name: ${{ github.event.inputs.environment == '' && 'test' || github.event.inputs.environment }}
    concurrency: ${{ github.event.inputs.environment == '' && 'test' || github.event.inputs.environment }}
    needs: [ check ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Prepare environment variables
        id: env
        run: |
          ENVIRONMENT=${{ github.event.inputs.environment }}
          [ "$ENVIRONMENT" = "" ] && ENVIRONMENT=test

          if [ "$ENVIRONMENT" == "test" ]; then
            echo "TODO: add test envs."
          elif [ "$ENVIRONMENT" == "prod" ]; then
            echo "TODO: add prod envs."
          else
            printf '%s\n' "ENVIRONMENT is not in accepted range: test, prod." >&2
            exit 1
          fi

          echo ::set-output name=app::"${ORG}-${ENVIRONMENT}-${NAME}"
      - name: Setup Node with cache
        uses: actions/setup-node@v3
        with: { cache: "yarn" }
      - name: Install Yarn packages
        run: yarn install --frozen-lockfile
      - name: Heroku Login
        run: |
          sed --in-place --expression \
            "s/{{HEROKU_AUTH_TOKEN}}/${HEROKU_AUTH_TOKEN}/g" \
            .github/workflows/.netrc
          mv .github/workflows/.netrc ~/
      - name: Prepare deployment
        run: |
          heroku apps:create --region eu ${{ steps.env.outputs.app }} || true
          heroku config:set --app=${{ steps.env.outputs.app }} \
            YARN_PRODUCTION=true \
            WEATHERSTACK_KEY=${{ secrets.WEATHERSTACK_KEY }} \
            MAPBOX_ACCESS_TOKEN=${{ secrets.MAPBOX_ACCESS_TOKEN }} \
            NODE_ENV=production
          heroku git:remote --app=${{ steps.env.outputs.app }}
      - name: Deploy
        run: |
          git push heroku ${{ github.ref }}:main --force
          heroku ps:scale web=1
      - name: Cleanup
        if: always()
        run: rm --force ~/.netrc
